The java main() method doesn’t return any value. Therefore, it is necessary to have a void return type.
● String args[]: String in java is a class that is used to work on Strings and args is a reference variable that refers to an array of type String. If you want to pass the argument through the command line then it is necessary to make the argument of the main() method as String args[].

Compiled class extension:  java
Command to compile java code: java file_name.java
command to run java code: java file_Name

java main method is public because jvm calls the main() outside the class.

There are three types of comments in Java.
Single Line Comment.
Multi Line Comment.
Documentation Comment.  : /** documentation */
This is a documentation comment and in general its called doc comment. The JDK javadoc tool uses doc comments when preparing automatically generated documentation.

The Print() Method
There is also a print() method, which is similar to println().

The only difference is that it does not insert a new line at the end of the output

Output question
public class Main {
  public static void main(String[] args) {
    System.out.println("3" + "3");
  }
}

Output answer
33

Output question
#include <iostream>

using namespace std;

int main()
{
    cout<<("3" + "3");

    return 0;
}
Output ANSWER
ERROR: INValid operANDS

Use final keyword for making variables constantand non-changeable : used in both alphabets and integers

Use capital s while using String keyword

The general rules for naming variables are:
Names can contain letters, digits, underscores, and dollar signs
Names must begin with a letter
Names should start with a lowercase letter and it cannot contain whitespace
Names can also begin with $ and _ (but we will not use it in this tutorial)
Names are case sensitive ("myVar" and "myvar" are different variables)
Reserved words (like Java keywords, such as int or boolean) cannot be used as names

Data types are divided into two groups:
Primitive data types - includes byte(-128 to 127), short(-32768 to 32767), int, long, float(put f at end), double(put d at end), boolean and char
//for applying power of 10 use e/E
Non-primitive data types - such as String, Arrays and Classes 
//A String in Java is actually a non-primitive data type, because it refers to an object. The String object has methods that are used to perform certain operations on strings.

A primitive type has always a value, while non-primitive types can be null.
A primitive type starts with a lowercase letter, while non-primitive types starts with an uppercase letter.

Q: size of array
public class Main
{
	public static void main(String[] args) {
	     int[] array = new int[4];
 
         int size= array.length;
		System.out.println(size);
	}
}

Q: Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
A: class Solution {
    public int[] twoSum(int[] nums, int target) {
        int size=nums.length;
        int[] result = new int[2];
     for(int i=0;i<size;i++){
  
         for(int j=i+1;j<size;j++){
             if(nums[i]+nums[j]==target){
                  return new int[] {i, j};
             }
         }
     }   
        return new int[] {};
    }
}

-> java TYPE CASTING
-Widening Casting (automatically) - converting a smaller type to a larger type size : double myDouble = myInt; // Automatic casting: int to double
-Narrowing Casting (manually) - converting a larger type to a smaller size type: int myInt = (int) myDouble; // Manual casting: double to int

-> Java strings

-to check length:  .length();
- String txt = "Hello World";
  System.out.println(txt.toUpperCase());   // Outputs "HELLO WORLD"
  System.out.println(txt.toLowerCase());   // Outputs "hello world"
- String txt = "Please locate where 'locate' occurs!";
  System.out.println(txt.indexOf("locate")); // Outputs 7

- Method	Description	Return Type
charAt()	        Returns the character at the specified index (position)	char
codePointAt()	        Returns the Unicode of the character at the specified index	int
codePointBefore()	Returns the Unicode of the character before the specified index	int
codePointCount()	Returns the number of Unicode values found in a string.	int
compareTo()	        Compares two strings lexicographically	int
compareToIgnoreCase()	Compares two strings lexicographically, ignoring case differences	int
concat()	        Appends a string to the end of another string	String                              
contains()	        Checks whether a string contains a sequence of characters	boolean            
contentEquals()	        Checks whether a string contains the exact same sequence of characters of the specified CharSequence or StringBuffer	boolean
copyValueOf()	        Returns a String that represents the characters of the character array	String
endsWith()	        Checks whether a string ends with the specified character(s)	boolean
equals()	        Compares two strings. Returns true if the strings are equal, and false if not	boolean 
equalsIgnoreCase()	Compares two strings, ignoring case considerations	boolean
format()	Returns a formatted string using the specified locale, format string, and arguments	String
getBytes()	Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array	byte[]
getChars()	Copies characters from a string to an array of chars	void
hashCode()	Returns the hash code of a string	int
indexOf()	Returns the position of the first found occurrence of specified characters in a string	int
intern()	Returns the canonical representation for the string object	String
isEmpty()	Checks whether a string is empty or not	boolean
lastIndexOf()	Returns the position of the last found occurrence of specified characters in a string	int
length()	Returns the length of a specified string	int
matches()	Searches a string for a match against a regular expression, and returns the matches	boolean
offsetByCodePoints()	Returns the index within this String that is offset from the given index by codePointOffset code points	int
regionMatches()	Tests if two string regions are equal	boolean
replace()	Searches a string for a specified value, and returns a new string where the specified values are replaced	String
replaceFirst()	Replaces the first occurrence of a substring that matches the given regular expression with the given replacement	String
replaceAll()	Replaces each substring of this string that matches the given regular expression with the given replacement	String
split()	Splits a string into an array of substrings	String[]
startsWith()	Checks whether a string starts with specified characters	boolean
subSequence()	Returns a new character sequence that is a subsequence of this sequence	CharSequence
substring()	Returns a new string which is the substring of a specified string	String
toCharArray()	Converts this string to a new character array	char[]
toLowerCase()	Converts a string to lower case letters	String
toString()	Returns the value of a String object	String
toUpperCase()	Converts a string to upper case letters	String
trim()	Removes whitespace from both ends of a string	String
valueOf()	Returns the string representation of the specified value	String

-> for each loop
for (type variableName : arrayName) {
  // code block to be executed
}

-> Array
- declaration: String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};


-> Java program to fill a subarray of given array
import java.util.Arrays;
  
public class Main
{
    public static void main(String[] args)
    {
        int ar[] = {2, 2, 1, 8, 3, 2, 2, 4, 2};
  
        // To fill complete array with a particular
        // value
        Arrays.fill(ar, 10);
        System.out.println("Array completely filled" +
                  " with 10\n" + Arrays.toString(ar));
    }
}
Output:
Array completely filled with 10
[10, 10, 10, 10, 10, 10, 10, 10, 10]


-> a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects
-> provide public get and set methods to access and update the value of a private variable


->. Interfaces
- An interface is a completely "abstract class" that is used to group related methods with empty bodies.
- // Example
  interface Animal {
  public void animalSound(); // interface method (does not have a body)
  public void run(); // interface method (does not have a body)
  }
- Like abstract classes, interfaces cannot be used to create objects (in the example above, it is not possible to create an "Animal" object in the MyMainClass)
 Interface methods do not have a body - the body is provided by the "implement" class
 On implementation of an interface, you must override all of its methods
 Interface methods are by default abstract and public
 Interface attributes are by default public, static and final
 An interface cannot contain a constructor (as it cannot be used to create objects)
- when and why to use interface class
1) To achieve security - hide certain details and only show the important details of an object (interface).
2) Java does not support "multiple inheritance" (a class can only inherit from one superclass). 
However, it can be achieved with interfaces, because the class can implement multiple interfaces. Note: To implement multiple interfaces, separate them with a comma (see example below).


-> Java User Input
- Scanner scn = new Scanner(System.in)
  int n= scn.nextInt();
- nextBoolean()	Reads a boolean value from the user
  nextByte()	Reads a byte value from the user
  nextDouble()	Reads a double value from the user
  nextFloat()	Reads a float value from the user
  nextInt()	Reads a int value from the user
  nextLine()	Reads a String value from the user
  nextLong()	Reads a long value from the user
  nextShort()	Reads a short value from the user

-> Java ArrayList
- import java.util.ArrayList;
  ArrayList<String> cars = new ArrayList<String>(); 
  cars.add("Volvo"); // to add
  cars.get(0); // to acess
  cars.set(0, "Opel"); // to change an element
  cars.remove(0); // to remove specific element
  cars,clear() // toremove all elemt

-> Linked list
addFirst()	Adds an item to the beginning of the list.	
addLast()	Add an item to the end of the list	
removeFirst()	Remove an item from the beginning of the list.	
removeLast()	Remove an item from the end of the list	
getFirst()	Get the item at the beginning of the list	
getLast()	Get the item at the end of the list	

-> Java HashMap
-import java.util.HashMap; // import the HashMap class
 HashMap<String, String> capitalCities = new HashMap<String, String>();
- capitalCities.put("England", "London"); // add items
.get() // to aces
.remove .clear() // similar
.size
- Loop Through a HashMap
 Use the keySet() method if you only want the keys, and use the values() method if you only want the values:
import java.util.HashMap;

public class Main {
  public static void main(String[] args) {

    // Create a HashMap object called people
    HashMap<String, Integer> people = new HashMap<String, Integer>();


    // Add keys and values (Name, Age)
    people.put("John", 32);
    people.put("Steve", 30);
    people.put("Angie", 33);

    for (String i : people.keySet()) {
      System.out.println("key: " + i + " value: " + people.get(i));
    }
  }
}

-> Java hashset
- A HashSet is a collection of items where every item is unique
- HashSet<String> cars = new HashSet<String>();
- cars.contains("Mazda"); // check if an item exsist
baki same

-> Java Iterator
- An Iterator is an object that can be used to loop through collections, like ArrayList and HashSet. 
- import java.util.ArrayList;
import java.util.Iterator;

public class Main {
  public static void main(String[] args) {

    // Make a collection
    ArrayList<String> cars = new ArrayList<String>();
    cars.add("Volvo");
    cars.add("BMW");
    cars.add("Ford");
    cars.add("Mazda");

    // Get the iterator
    Iterator<String> it = cars.iterator();

    // Print the first item
    System.out.println(it.next());
  }
}
- Looping Through a Collection
while(it.hasNext()) {
  System.out.println(it.next());
}


-> wrapper class
- Wrapper classes provide a way to use primitive data types (int, boolean, etc..) as objects.
- Primitive Data Type	Wrapper Class
byte	Byte
short	Short
int	Integer
long	Long
float	Float
double	Double
boolean	Boolean
char	Character
- ArrayList<int> myNumbers = new ArrayList<int>(); // Invalid
  ArrayList<Integer> myNumbers = new ArrayList<Integer>(); // Valid
- It is because of the additional features being there in the Wrapper class over the primitive data types when it comes to usage. These methods include primarily methods like valueOf(), parseInt(), toString(), and many more.

-> parsexxxx()
- used to change data type (into primitive ones)
- can be used as parseInt(), parseDouble();
- not for string and character

-> to convert string to character
- charAt() method
String s="hello";  
char c=s.charAt(0);//returns h  
- charArray() method
public static void main(String args[]){  
String s1="hello";    
char[] ch=s1.toCharArray();    
for(int i=0;i<ch.length;i++){    
System.out.println("char at "+i+" index is: "+ch[i]);   
}  
}
O/P:
char at 0 index is: h
char at 1 index is: e
char at 2 index is: l
char at 3 index is: l
char at 4 index is: o








